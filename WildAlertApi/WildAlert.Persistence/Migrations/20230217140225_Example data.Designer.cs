// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WildAlert.Persistence;

#nullable disable

namespace WildAlert.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230217140225_Example data")]
    partial class Exampledata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.14");

            modelBuilder.Entity("WildAlert.Persistence.Entities.Alerts.AlertEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Animal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Alerts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bf152ece-9dd3-4f60-abab-32c43235e2fb"),
                            Animal = 1,
                            Comments = "testowy alert dzik",
                            CreatedAt = new DateTime(2023, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 50.0,
                            Longitude = 20.0
                        },
                        new
                        {
                            Id = new Guid("9390acd1-f75c-4541-bf26-e54a04de1340"),
                            Animal = 3,
                            Comments = "testowy alert jeleń",
                            CreatedAt = new DateTime(2023, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 30.0,
                            Longitude = 20.0
                        },
                        new
                        {
                            Id = new Guid("351b8c74-6f0d-4e1d-846a-87432ee6e9a3"),
                            Animal = 2,
                            Comments = "testowy alert lis",
                            CreatedAt = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 20.0,
                            Longitude = 30.0
                        });
                });

            modelBuilder.Entity("WildAlert.Persistence.Entities.SensorData.SensorDataEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("DetectedAnimal")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DetectedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SensorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.ToTable("SensorData");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6964b836-ef63-4736-b6cb-b4f7d74649f0"),
                            DetectedAnimal = 1,
                            DetectedAt = new DateTime(2023, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SensorId = new Guid("237ac44e-c4ea-4ef4-bc3c-d4db57f5a343")
                        },
                        new
                        {
                            Id = new Guid("dc4ef180-4dc3-4c3a-a42e-2e034c693897"),
                            DetectedAnimal = 666,
                            DetectedAt = new DateTime(2023, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SensorId = new Guid("3dc6abcc-3d4d-4c34-8fb2-5e115b5b73cd")
                        },
                        new
                        {
                            Id = new Guid("fe447da9-2c08-4bbb-9b4e-53043f56fff1"),
                            DetectedAnimal = 0,
                            DetectedAt = new DateTime(2023, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SensorId = new Guid("fe447da9-2c08-4bbb-9b4e-53043f56fff1")
                        });
                });

            modelBuilder.Entity("WildAlert.Persistence.Entities.Sensors.SensorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Sensors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("237ac44e-c4ea-4ef4-bc3c-d4db57f5a343"),
                            Latitude = 31.0,
                            Longitude = 21.0,
                            Name = "skrzyzowanie x z y"
                        },
                        new
                        {
                            Id = new Guid("3dc6abcc-3d4d-4c34-8fb2-5e115b5b73cd"),
                            Latitude = 51.0,
                            Longitude = 21.0,
                            Name = "ulica przykladowa"
                        },
                        new
                        {
                            Id = new Guid("fe447da9-2c08-4bbb-9b4e-53043f56fff1"),
                            Latitude = 31.0,
                            Longitude = 31.0,
                            Name = "testowy park"
                        });
                });

            modelBuilder.Entity("WildAlert.Persistence.Entities.SensorData.SensorDataEntity", b =>
                {
                    b.HasOne("WildAlert.Persistence.Entities.Sensors.SensorEntity", "Sensor")
                        .WithMany("SensorData")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("WildAlert.Persistence.Entities.Sensors.SensorEntity", b =>
                {
                    b.Navigation("SensorData");
                });
#pragma warning restore 612, 618
        }
    }
}
